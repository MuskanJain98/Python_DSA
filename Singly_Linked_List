#Creating a SinglyLikedList with insertion at the end 
#every node will take data value as input along with address of the next node
class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
        #next here represents the adress of the next node in the first node
        #at first, it will be empty hence none

#creating a linkedlist 
class LinkedList:
    def __init__(self):
        self.head=None
            #head is a pointer which will be used to traverse the list at first it is none 
    def InsertAtEnd(self,data):
        newNode=Node(data)
        #start with the data value of the node 
        if(self.head is None):
            #head will be none only for the first node because adress of next node is not
            #yet present
            self.head=newNode
        
        else:
            temp=self.head
            while(temp.next is not None):
                #temp is pointing towards the next node now, until reaching the node which
                #has next value as none thus indicating new node as to be 
                #attached after this node at the end of the list
                temp=temp.next
            
            temp.next=newNode
        
    def printSinglyLinkedList(self):
        temp=self.head
        while temp is not None:
            print(temp.data,end=' ')
        #print(temp,end='')
            #print(temp.next)
            temp=temp.next

def main():
    singlyLinkedList=LinkedList()
    arr=list(map(int,input().split()))
    for i in range(len(arr)):
        singlyLinkedList.InsertAtEnd(arr[i])
    
    singlyLinkedList.printSinglyLinkedList
    
if __name__ == '__main__':
    main()
    

    
    
    
        
