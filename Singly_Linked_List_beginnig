#Creating a singly linkedlist with insertion at the beginning 
#creating nodes
class Node:
#one node will contain a data value and address of the next node
    def __init__(self,data):
        self.data=data
        self.next=None
    
class LinkedList:
#every node will have a pointer named as head to be pointing towards the next node in the list
    def __init__(self):
        self.head=None
        self.tail=None
  
    def insertionAtBeginning(self,data):
  #every new node will have a data value 
        newNode=Node(data)
    
        if self.head is None:
    #this will be true in case of first node, where currently no pointer is present
            self.head=newNode
        else:
            newNode.next=self.head
      #this step will work when 1st node head has adress of second node and is not none, therefore now header will jump and  point to the second node and so for #further nodes
            self.head=newNode
      
   
    def insertionAtEnd(self,data):
        newNode=Node(data)
        if(self.head is None):
            self.head=newNode
            self.tail=newNode
        else:
            self.tail.next=newNode
            self.tail=newNode


    
      
    def printSinglyLinkedList(self):
        temp=self.head
        while(temp is not None):
            print(temp.data,end=' ')
      #print(temp,end='')
      #print(temp.next)
            temp=temp.next

def main():
    singlyLinkedList_rev=LinkedList()
  #will print the desired list in revrse as every new node is being inserted at the beginning
    singlyLinkedList_order=LinkedList()
  #the linked list in order same as the input array
    arr=list(map(int,input().split()))
    for i in  range(len(arr)):
        singlyLinkedList_rev.insertionAtBeginning(arr[i])
        singlyLinkedList_order.insertionAtEnd(arr[i])
    singlyLinkedList_rev.printSinglyLinkedList()
    print()
    singlyLinkedList_order.printSinglyLinkedList()

        
if __name__ == '__main__':
    main()
